// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "lvcam.h"

/////////////////////////////////////////////////////////////////////////////
// CLVCam

IMPLEMENT_DYNCREATE(CLVCam, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CLVCam properties

CString CLVCam::GetVersion()
{
	CString result;
	GetProperty(0x64, VT_BSTR, (void*)&result);
	return result;
}

void CLVCam::SetVersion(LPCTSTR propVal)
{
	SetProperty(0x64, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CLVCam operations

short CLVCam::Connect(short Camera, short Port, short Device, short Interface, LPCTSTR Server)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x1f4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		Camera, Port, Device, Interface, Server);
	return result;
}

short CLVCam::Disconnect()
{
	short result;
	InvokeHelper(0x1f5, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

VARIANT CLVCam::GetCameraProperty(short Id)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1f6, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		Id);
	return result;
}

VARIANT CLVCam::GetImage(short imageType)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		imageType);
	return result;
}

VARIANT CLVCam::GetLUT(short tableType)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1f8, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		tableType);
	return result;
}

short CLVCam::SetCameraProperty(short Id, const VARIANT& Property_)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x1f9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		Id, &Property_);
	return result;
}

short CLVCam::SetImage(const VARIANT& Image)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1fa, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&Image);
	return result;
}

short CLVCam::DoCameraAction(short Action)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1fb, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		Action);
	return result;
}

CString CLVCam::GetError(short errCode)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1fc, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		errCode);
	return result;
}

short CLVCam::SubmitCamCommand(LPCTSTR cmd)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1fd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		cmd);
	return result;
}

float CLVCam::ToTemperature(long Raw, float Eps)
{
	float result;
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x1fe, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		Raw, Eps);
	return result;
}

VARIANT CLVCam::GetAbsLUT(short tableType)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1ff, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		tableType);
	return result;
}

VARIANT CLVCam::GetObjLUT(short tableType)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x200, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		tableType);
	return result;
}

VARIANT CLVCam::GetImages(short imageType, const VARIANT& imageArray, long imageSize)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT VTS_I4;
	InvokeHelper(0x201, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		imageType, &imageArray, imageSize);
	return result;
}

VARIANT CLVCam::MLGetImages(short imageType, short imageWidth, short imageHeight, short Image)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x202, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		imageType, imageWidth, imageHeight, Image);
	return result;
}

VARIANT CLVCam::EmissCalc(long x, long y, float knownTemp)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_R4;
	InvokeHelper(0x203, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		x, y, knownTemp);
	return result;
}

short CLVCam::SetEmissMap(const VARIANT& Map)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x204, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&Map);
	return result;
}

short CLVCam::SetDistanceMap(const VARIANT& Map)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x205, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&Map);
	return result;
}

void CLVCam::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
