#if !defined(AFX_LVCAM_H__68949F6A_B495_4CD6_945F_348B2E05F9BB__INCLUDED_)
#define AFX_LVCAM_H__68949F6A_B495_4CD6_945F_348B2E05F9BB__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CLVCam wrapper class

class CLVCam : public CWnd
{
protected:
	DECLARE_DYNCREATE(CLVCam)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x61A62BE, 0x4A3, 0x4EA2, { 0x84, 0xF9, 0x2E, 0x34, 0x79, 0x88, 0x79, 0x59 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	CString GetVersion();
	void SetVersion(LPCTSTR);

// Operations
public:
	short Connect(short Camera, short Port, short Device, short Interface, LPCTSTR Server);
	short Disconnect();
	VARIANT GetCameraProperty(short Id);
	VARIANT GetImage(short imageType);
	VARIANT GetLUT(short tableType);
	short SetCameraProperty(short Id, const VARIANT& Property_);
	short SetImage(const VARIANT& Image);
	short DoCameraAction(short Action);
	CString GetError(short errCode);
	short SubmitCamCommand(LPCTSTR cmd);
	float ToTemperature(long Raw, float Eps);
	VARIANT GetAbsLUT(short tableType);
	VARIANT GetObjLUT(short tableType);
	VARIANT GetImages(short imageType, const VARIANT& imageArray, long imageSize);
	VARIANT MLGetImages(short imageType, short imageWidth, short imageHeight, short Image);
	VARIANT EmissCalc(long x, long y, float knownTemp);
	short SetEmissMap(const VARIANT& Map);
	short SetDistanceMap(const VARIANT& Map);
	void AboutBox();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_LVCAM_H__68949F6A_B495_4CD6_945F_348B2E05F9BB__INCLUDED_)
